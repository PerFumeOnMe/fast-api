name: PerfumeOnMe FastAPI CI/CD

on:
  push:
    branches: [ "main", "develop" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 의존성 캐시 최적화
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Docker Image Build
        run: docker build -t chanee29/perfume-recommender .

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Hub Push
        run: docker push chanee29/perfume-recommender

      - name: Get GitHub IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_PASSWORD }}
          aws-region: ap-northeast-1

      - name: Add GitHub IP to AWS
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: AWS EC2 Connection and Deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 500s
          script: |
            echo "🚀 FastAPI 배포 시작..."
            
            # 기존 FastAPI 컨테이너 중지 및 삭제
            sudo docker stop perfume-recommender-container || true
            sudo docker rm perfume-recommender-container || true
            sudo docker rmi chanee29/perfume-recommender || true
            
            # 새 이미지 가져오기
            sudo docker pull chanee29/perfume-recommender
            
            echo "🚀 FastAPI 컨테이너 실행 중..."
            
            # FastAPI 컨테이너 실행 (Spring Boot와 동일한 네트워크에서 실행)
            sudo docker run -d \
              --name perfume-recommender-container \
              --network bridge \
              -p 8000:8000 \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              --restart unless-stopped \
              chanee29/perfume-recommender
            
            # 컨테이너 상태 확인
            echo "🔍 컨테이너 상태 확인 중..."
            sleep 15
            
            if [ "$(sudo docker ps -q -f name=perfume-recommender-container)" ]; then
              echo "✅ FastAPI 컨테이너가 성공적으로 실행되었습니다!"
              
              # 헬스체크
              echo "🩺 API 헬스체크 중..."
              sleep 10
              
              # Docker 네트워크에서 헬스체크
              if sudo docker exec perfume-recommender-container curl -f http://localhost:8000/docs > /dev/null 2>&1; then
                echo "✅ FastAPI가 정상적으로 응답하고 있습니다!"
                echo "📋 API 문서: http://${{ secrets.EC2_HOST }}:8000/docs"
              else
                echo "⚠️  API 응답 확인 실패. 로그를 확인하세요."
                echo "📋 로그 확인: sudo docker logs perfume-recommender-container"
              fi
              
              # 컨테이너 정보 출력
              echo "📊 실행 중인 컨테이너:"
              sudo docker ps --filter name=perfume-recommender-container --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              
            else
              echo "❌ FastAPI 컨테이너 실행 실패!"
              echo "📋 로그 확인: sudo docker logs perfume-recommender-container"
              exit 1
            fi
            
            # 사용하지 않는 이미지 정리
            echo "🧹 사용하지 않는 Docker 이미지 정리..."
            sudo docker image prune -f
            
            echo "✅ FastAPI 배포 완료!"

      - name: Remove GitHub IP from Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32